{
  "name": "bitstring",
  "version": "1.0.0",
  "description": "Read/write packed binary strings bit-by-bit",
  "homepage": "https://github.com/dsc/bitstring.js",
  "keywords": [
    "bitstring",
    "binary",
    "buffer",
    "util",
    "server",
    "client",
    "browser"
  ],
  "author": {
    "name": "David Schoonover",
    "email": "dsc@less.ly",
    "url": "http://less.ly"
  },
  "main": "./bitstring",
  "devDependencies": {
    "coco": ">= 0.7.0"
  },
  "repository": {
    "type": "git",
    "url": "git://github.com/dsc/bitstring.js.git"
  },
  "bugs": {
    "url": "https://github.com/dsc/bitstring.js/issues"
  },
  "engine": {
    "node": ">=0.6.x"
  },
  "license": "MIT",
  "readme": "# BitString.js\n\nA class to read and write packed binary strings, bit-by-bit.\n\n```js\nvar BitString = require('bitstring');\n\nvar bits = new BitString();\nbits.writebits(4)\n    .writebits(255)\n    .writebits(1,4)\n    .writebits(8)\n\nbits.number()       == 10478336\nbits.hex()          == '9fe30'\nbits.bin()          == '10011111111000110'\nbits.bytearray() // == [ 159, 227, 0 ]\n```\n\n\n## Usage\n\nOn the server, install it:\n\n```sh\nnpm install bitstring\n```\n\nAnd then just require it:\n\n```js\nvar BitString = require('bitstring');\n```\n\nIn the browser, you have a number of options. You can download this package and include `bitstring.js` somewhere, which will add itself as a global, `window.BitString`. Alternatively, if you're using something like [require.js][require_js] to wrap your modules, BitString will check for the `module` variable and properly set itself as `module.exports`.\n\n\n## API\n\n### BitString( source='', buf=[] )\n\nCreate a new BitString buffer. Optionally takes source data as a String, and/or an Array to use as the byte-buffer.\n\n#### .size() -> Number\n\nThe size in bytes of the BitString.\n\n\n#### .bitsize() -> Number\n\nThe size in bits of the BitString.\n\n\n#### .writebits(n, [size]) -> this\n\nWrites the bits `n` to the stream (bits must be supplied as a number). Supplying `n=0` will write one bit. Supplying the optional parameter `size` treats the bits as a field with the given length.\n\n\n#### .flush() -> this\n\nFlushes any pending bits to the stream.\n\n\n#### .truncate() -> this\n\nTruncates the stream to zero bits.\n\n\n#### .seek(n, mode=SEEK_ABSOLUTE) -> this\n\nFlushes the bit-buffer and moves to the given byte-offset. Mode Constants:\n\n```js\nBitString.SEEK_ABSOLUTE = 0\nBitString.SEEK_RELATIVE = 1\nBitString.SEEK_FROM_EOF = 2\n```\n\n\n#### .tell() -> Number\n\nReturns the current position of the cursor as a *byte* offset from the start of the stream.\n\n#### .readbits(n) -> String\n\nReads the next `n` bits from the stream.\n\n\n#### .peek(n) -> String\n\nReads the next `n` bits without moving the cursor.\n\n\n#### .hasMore() -> Boolean\n\nTrue if there is more data to read.\n\n\n#### .each(fn, cxt=this) -> this\n\nIterates over the bytes in the BitString.\n\n\n#### .map(fn, cxt=this) -> Array\n\nAs `Array.map`, but over the bytes in the BitString.\n\n\n#### .reduce(fn, acc, cxt=this)\n\nAs `Array.reduce`, but over the bytes in the BitString.\n\n\n#### .bytearray() -> Array\n\nReturns the stream as an Array of bytes.\n\n\n#### .bin(byte_sep='') -> String\n\nDumps the stream as a binary string. Unlike `.number()`, `.bin()` will not cause int overflow.\n\n\n#### .hex() -> String\n\nReturns the stream as a hex string.\n\n\n#### .number() -> Number\n\nReturns the buffer as a number. Use this with obvious caution.\n\n\n#### .dump() -> String\n\nDumps the stream as a string of UTF8 characters; does not flush or change cursor position.\n\n\n#### .repr(dump_buf=true) -> String\n\nString representation of the data-structure; if `dump_buf` is true, the contents of the stream will be included, but it will not flush or change cursor position.\n\n\n#### .toString() -> String\n\nDumps the stream as a string; flushes the bit-buffer but leaves cursor position unchanged.\n\n\n\n## License\n\nMIT: http://dsc.mit-license.org/\n",
  "_id": "bitstring@1.0.0",
  "dist": {
    "shasum": "87ec1c676c5c88c9d0fff5d142f12126bd38daa7",
    "tarball": "http://registry.npmjs.org/bitstring/-/bitstring-1.0.0.tgz"
  },
  "maintainers": [
    {
      "name": "dsc",
      "email": "dsc@less.ly"
    }
  ],
  "directories": {},
  "_shasum": "87ec1c676c5c88c9d0fff5d142f12126bd38daa7",
  "_resolved": "https://registry.npmjs.org/bitstring/-/bitstring-1.0.0.tgz",
  "_from": "bitstring@*"
}
